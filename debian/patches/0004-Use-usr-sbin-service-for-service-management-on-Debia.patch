From: Gaudenz Steinlin <gaudenz@debian.org>
Date: Tue, 4 Aug 2015 23:30:25 +0200
Subject: Use /usr/sbin/service for service management on Debian

In Debian jessie systemd will be the default init system. But the old system V
and other alternative init systems are still supported. /usr/sbin/service
provides an abstraction layer which is able to start, stop and restart
services independent of the init system used.

Bug: https://tickets.puppetlabs.com/browse/PUP-2023
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=775795
---
 lib/puppet/provider/service/debian.rb | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/lib/puppet/provider/service/debian.rb b/lib/puppet/provider/service/debian.rb
index 8acef7d..1dfa603 100644
--- a/lib/puppet/provider/service/debian.rb
+++ b/lib/puppet/provider/service/debian.rb
@@ -16,6 +16,11 @@ Puppet::Type.type(:service).provide :debian, :parent => :init do
   # is resolved.
   commands :invoke_rc => "/usr/sbin/invoke-rc.d"
 
+  # This isn't being used directly, it's just here to ensure
+  # that the /usr/sbin/service binary is available.
+  SERVICE = "/usr/sbin/service"
+  commands :service_cmd => SERVICE
+
   defaultfor :operatingsystem => :debian
 
   # Remove the symlinks
@@ -62,4 +67,28 @@ Puppet::Type.type(:service).provide :debian, :parent => :init do
     update_rc "-f", @resource[:name], "remove"
     update_rc @resource[:name], "defaults"
   end
+
+  # The start, stop, restart and status command use service
+  # this makes sure that these commands work with whatever init
+  # system is installed
+  def startcmd
+    [SERVICE, @resource[:name], :start]
+  end
+
+  # The stop command is just the init script with 'stop'.
+  def stopcmd
+    [SERVICE, @resource[:name], :stop]
+  end
+
+  def restartcmd
+    (@resource[:hasrestart] == :true) && [SERVICE, @resource[:name], :restart]
+  end
+
+  # If it was specified that the init script has a 'status' command, then
+  # we just return that; otherwise, we return false, which causes it to
+  # fallback to other mechanisms.
+  def statuscmd
+    (@resource[:hasstatus] == :true) && [SERVICE, @resource[:name], :status]
+  end
+
 end
